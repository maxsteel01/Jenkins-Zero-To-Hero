pipeline {
  agent any
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        echo "Build triggered by: ${env.BUILD_USER}"
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'

      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://192.168.64.6:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "ismail001/myimage-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            sh 'pwd'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            KUBE_CONTEXT = 'minikube'
            KUBE_MANIFEST = 'java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yaml'
        }
        steps {
            script {
                    // Set the Kubernetes context to Minikube
                    sh "kubectl config use-context ${KUBE_CONTEXT}"

                    // Apply the Kubernetes manifest to deploy the app
                    sh "kubectl apply -f ${KUBE_MANIFEST}"

                    // You may also need to wait for the deployment to finish
                    // e.g., using kubectl rollout status or other mechanisms
                }
        }
    }
  }
}
